function step_up_chopper_gui
    % Create the main figure window
    fig = figure('Name', 'Step-Up Chopper Simulation', ...
                 'NumberTitle', 'off', ...
                 'Position', [100, 100, 1200, 700], ...
                 'Color', [1, 1, 1], ...
                 'MenuBar', 'none', ...
                 'ToolBar', 'none');
    
    % Create title
    uicontrol('Style', 'text', ...
              'Position', [400, 650, 400, 40], ...
              'String', 'STEP-UP CHOPPER (BOOST CONVERTER) SIMULATION', ...
              'FontSize', 16, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [1, 1, 1]);
    
    % Create UI controls panel
    control_panel = uipanel('Title', 'Control Parameters', ...
                           'Position', [0.02, 0.05, 0.35, 0.9], ...
                           'BackgroundColor', [0.95, 0.95, 0.95], ...
                           'ForegroundColor', [0, 0, 0], ...
                           'FontWeight', 'bold', ...
                           'ShadowColor', [0.5, 0.5, 0.5]);
    
    % Create graphs panel
    graph_panel = uipanel('Title', 'Simulation Results', ...
                         'Position', [0.38, 0.05, 0.6, 0.9], ...
                         'BackgroundColor', [1, 1, 1], ...
                         'ForegroundColor', [0, 0, 0], ...
                         'FontWeight', 'bold', ...
                         'ShadowColor', [0.5, 0.5, 0.5]);
    
    % Create UI controls
    create_controls(control_panel);
    
    % Initialize simulation with default parameters
    run_simulation(fig, graph_panel);
end

function create_controls(panel)
    % Set panel position parameters
    panel_width = 400;
    y_pos = 320;
    label_width = 180;
    slider_width = 180;
    value_width = 50;
    
    % Input voltage control
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Position', [20, y_pos, label_width, 20], ...
              'String', 'Input Voltage (V):', ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95], ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Style', 'slider', ...
              'Parent', panel, ...
              'Tag', 'Vin_slider', ...
              'Position', [200, y_pos, slider_width, 20], ...
              'Min', 5, 'Max', 50, 'Value', 12, ...
              'BackgroundColor', [0.9, 0.9, 0.9], ...
              'Callback', @update_simulation);
    
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Tag', 'Vin_value', ...
              'Position', [390, y_pos, value_width, 20], ...
              'String', '12', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95]);
    
    % Duty cycle control
    y_pos = y_pos - 40;
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Position', [20, y_pos, label_width, 20], ...
              'String', 'Duty Cycle (%):', ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95], ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Style', 'slider', ...
              'Parent', panel, ...
              'Tag', 'duty_slider', ...
              'Position', [200, y_pos, slider_width, 20], ...
              'Min', 0, 'Max', 90, 'Value', 50, ...
              'BackgroundColor', [0.9, 0.9, 0.9], ...
              'Callback', @update_simulation);
    
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Tag', 'duty_value', ...
              'Position', [390, y_pos, value_width, 20], ...
              'String', '50', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95]);
    
    % Load resistance control
    y_pos = y_pos - 40;
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Position', [20, y_pos, label_width, 20], ...
              'String', 'Load Resistance (Ω):', ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95], ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Style', 'slider', ...
              'Parent', panel, ...
              'Tag', 'Rload_slider', ...
              'Position', [200, y_pos, slider_width, 20], ...
              'Min', 1, 'Max', 100, 'Value', 10, ...
              'BackgroundColor', [0.9, 0.9, 0.9], ...
              'Callback', @update_simulation);
    
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Tag', 'Rload_value', ...
              'Position', [390, y_pos, value_width, 20], ...
              'String', '10', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95]);
    
    % Inductance control
    y_pos = y_pos - 40;
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Position', [20, y_pos, label_width, 20], ...
              'String', 'Inductance (mH):', ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95], ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Style', 'slider', ...
              'Parent', panel, ...
              'Tag', 'L_slider', ...
              'Position', [200, y_pos, slider_width, 20], ...
              'Min', 0.1, 'Max', 10, 'Value', 1, ...
              'BackgroundColor', [0.9, 0.9, 0.9], ...
              'Callback', @update_simulation);
    
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Tag', 'L_value', ...
              'Position', [390, y_pos, value_width, 20], ...
              'String', '1', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95]);
    
    % Capacitance control
    y_pos = y_pos - 40;
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Position', [20, y_pos, label_width, 20], ...
              'String', 'Capacitance (μF):', ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95], ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Style', 'slider', ...
              'Parent', panel, ...
              'Tag', 'C_slider', ...
              'Position', [200, y_pos, slider_width, 20], ...
              'Min', 1, 'Max', 100, 'Value', 10, ...
              'BackgroundColor', [0.9, 0.9, 0.9], ...
              'Callback', @update_simulation);
    
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Tag', 'C_value', ...
              'Position', [390, y_pos, value_width, 20], ...
              'String', '10', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95]);
    
    % Frequency control
    y_pos = y_pos - 40;
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Position', [20, y_pos, label_width, 20], ...
              'String', 'Switching Frequency (kHz):', ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95], ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Style', 'slider', ...
              'Parent', panel, ...
              'Tag', 'freq_slider', ...
              'Position', [200, y_pos, slider_width, 20], ...
              'Min', 1, 'Max', 100, 'Value', 10, ...
              'BackgroundColor', [0.9, 0.9, 0.9], ...
              'Callback', @update_simulation);
    
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Tag', 'freq_value', ...
              'Position', [390, y_pos, value_width, 20], ...
              'String', '10', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95]);
    
    % Simulation time control
    y_pos = y_pos - 40;
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Position', [20, y_pos, label_width, 20], ...
              'String', 'Simulation Time (ms):', ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95], ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Style', 'slider', ...
              'Parent', panel, ...
              'Tag', 'time_slider', ...
              'Position', [200, y_pos, slider_width, 20], ...
              'Min', 1, 'Max', 50, 'Value', 10, ...
              'BackgroundColor', [0.9, 0.9, 0.9], ...
              'Callback', @update_simulation);
    
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Tag', 'time_value', ...
              'Position', [390, y_pos, value_width, 20], ...
              'String', '10', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.95, 0.95, 0.95]);
    
    % Run button
    uicontrol('Style', 'pushbutton', ...
              'Parent', panel, ...
              'Position', [150, 30, 100, 30], ...
              'String', 'Run Simulation', ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.8, 0.8, 1], ...
              'Callback', @update_simulation);
    
    % Output display
    uicontrol('Style', 'text', ...
              'Parent', panel, ...
              'Tag', 'output_text', ...
              'Position', [20, 80, 360, 40], ...
              'String', 'Output Voltage: 0V', ...
              'FontSize', 12, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0, 0, 0], ...
              'BackgroundColor', [0.9, 0.9, 0.9]);
end

function update_simulation(src, ~)
    % Get the figure handle
    fig = gcf;
    
    % Find the graph panel
    graph_panel = findobj(fig, 'Type', 'uipanel', 'Title', 'Simulation Results');
    
    % Update slider value displays
    vin_slider = findobj(fig, 'Tag', 'Vin_slider');
    vin_value = findobj(fig, 'Tag', 'Vin_value');
    set(vin_value, 'String', num2str(get(vin_slider, 'Value')));
    
    duty_slider = findobj(fig, 'Tag', 'duty_slider');
    duty_value = findobj(fig, 'Tag', 'duty_value');
    set(duty_value, 'String', num2str(get(duty_slider, 'Value')));
    
    Rload_slider = findobj(fig, 'Tag', 'Rload_slider');
    Rload_value = findobj(fig, 'Tag', 'Rload_value');
    set(Rload_value, 'String', num2str(get(Rload_slider, 'Value')));
    
    L_slider = findobj(fig, 'Tag', 'L_slider');
    L_value = findobj(fig, 'Tag', 'L_value');
    set(L_value, 'String', num2str(get(L_slider, 'Value')));
    
    C_slider = findobj(fig, 'Tag', 'C_slider');
    C_value = findobj(fig, 'Tag', 'C_value');
    set(C_value, 'String', num2str(get(C_slider, 'Value')));
    
    freq_slider = findobj(fig, 'Tag', 'freq_slider');
    freq_value = findobj(fig, 'Tag', 'freq_value');
    set(freq_value, 'String', num2str(get(freq_slider, 'Value')));
    
    time_slider = findobj(fig, 'Tag', 'time_slider');
    time_value = findobj(fig, 'Tag', 'time_value');
    set(time_value, 'String', num2str(get(time_slider, 'Value')));
    
    % Run the simulation
    run_simulation(fig, graph_panel);
end

function run_simulation(fig, graph_panel)
    % Get parameter values from sliders
    Vin = get(findobj(fig, 'Tag', 'Vin_slider'), 'Value');
    duty_cycle = get(findobj(fig, 'Tag', 'duty_slider'), 'Value') / 100;
    Rload = get(findobj(fig, 'Tag', 'Rload_slider'), 'Value');
    L = get(findobj(fig, 'Tag', 'L_slider'), 'Value') * 1e-3; % Convert to H
    C = get(findobj(fig, 'Tag', 'C_slider'), 'Value') * 1e-6; % Convert to F
    f_sw = get(findobj(fig, 'Tag', 'freq_slider'), 'Value') * 1e3; % Convert to Hz
    T_sim = get(findobj(fig, 'Tag', 'time_slider'), 'Value') * 1e-3; % Convert to s
    
    % Calculate switching period
    T_sw = 1 / f_sw;
    
    % Time vector
    t = 0:T_sw/1000:T_sim;
    
    % Generate PWM signal
    duty_cycles = duty_cycle * ones(size(t));
    pwm = mod(t, T_sw) < duty_cycle * T_sw;
    
    % Initialize state variables
    I_L = zeros(size(t));
    V_C = zeros(size(t));
    V_out = zeros(size(t));
    
    % Initial conditions
    I_L(1) = 0;
    V_C(1) = 0;
    
    % Simulation time step
    dt = t(2) - t(1);
    
    % Simulate the boost converter
    for i = 2:length(t)
        if pwm(i) % Switch ON
            dI_L_dt = Vin / L;
            dV_C_dt = -V_C(i-1) / (Rload * C);
        else % Switch OFF
            dI_L_dt = (Vin - V_C(i-1)) / L;
            dV_C_dt = (I_L(i-1) / C) - (V_C(i-1) / (Rload * C));
        end
        
        % Update states using Euler integration
        I_L(i) = I_L(i-1) + dI_L_dt * dt;
        V_C(i) = V_C(i-1) + dV_C_dt * dt;
        V_out(i) = V_C(i);
    end
    
    % Calculate theoretical output voltage (ideal)
    V_out_theoretical = Vin / (1 - duty_cycle);
    
    % Update output text
    output_text = findobj(fig, 'Tag', 'output_text');
    set(output_text, 'String', sprintf('Output Voltage: %.2fV (Theoretical: %.2fV)', mean(V_out(end-100:end)), V_out_theoretical));
    
    % Create or update plots
    if isempty(findobj(graph_panel, 'Type', 'axes'))
        % Create subplots if they don't exist
        ax1 = subplot(3, 1, 1, 'Parent', graph_panel);
        ax2 = subplot(3, 1, 2, 'Parent', graph_panel);
        ax3 = subplot(3, 1, 3, 'Parent', graph_panel);
    else
        % Clear existing plots
        axes_list = findobj(graph_panel, 'Type', 'axes');
        for i = 1:length(axes_list)
            cla(axes_list(i));
        end
    end
    
    % Plot PWM signal
    subplot(3, 1, 1, 'Parent', graph_panel);
    plot(t*1000, pwm, 'b', 'LineWidth', 1.5);
    ylim([-0.1, 1.1]);
    ylabel('PWM Signal', 'FontWeight', 'bold', 'Color', [0, 0, 0]);
    title('Step-Up Chopper Simulation', 'FontWeight', 'bold', 'Color', [0, 0, 0]);
    grid on;
    set(gca, 'XColor', [0, 0, 0], 'YColor', [0, 0, 0], 'Color', [1, 1, 1]);
    
    % Plot inductor current
    subplot(3, 1, 2, 'Parent', graph_panel);
    plot(t*1000, I_L, 'r', 'LineWidth', 1.5);
    ylabel('Inductor Current (A)', 'FontWeight', 'bold', 'Color', [0, 0, 0]);
    grid on;
    set(gca, 'XColor', [0, 0, 0], 'YColor', [0, 0, 0], 'Color', [1, 1, 1]);
    
    % Plot output voltage
    subplot(3, 1, 3, 'Parent', graph_panel);
    plot(t*1000, V_out, 'g', 'LineWidth', 1.5);
    xlabel('Time (ms)', 'FontWeight', 'bold', 'Color', [0, 0, 0]);
    ylabel('Output Voltage (V)', 'FontWeight', 'bold', 'Color', [0, 0, 0]);
    grid on;
    
    % Add theoretical value line
    hold on;
    plot([t(1)*1000, t(end)*1000], [V_out_theoretical, V_out_theoretical], 'k--', 'LineWidth', 1);
    legend('Simulated', 'Theoretical', 'Location', 'best', 'TextColor', [0, 0, 0]);
    hold off;
    set(gca, 'XColor', [0, 0, 0], 'YColor', [0, 0, 0], 'Color', [1, 1, 1]);
end